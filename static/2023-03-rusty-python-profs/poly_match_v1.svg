<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="634" onload="init(evt)" viewBox="0 0 1200 634" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="634" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00"></text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="623.00"> </text><svg id="frames" x="10" width="1180" total_samples="340"><g><title>find_close_polygons (poly_match_v1.py:60) (6 samples, 1.76%)</title><rect x="0.0000%" y="100" width="1.7647%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="6"/><text x="0.2500%" y="110.50"></text></g><g><title>array_dealloc (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1 samples, 0.29%)</title><rect x="13.8235%" y="116" width="0.2941%" height="15" fill="rgb(217,0,24)" fg:x="47" fg:w="1"/><text x="14.0735%" y="126.50"></text></g><g><title>PyDataMem_UserFREE (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1 samples, 0.29%)</title><rect x="13.8235%" y="132" width="0.2941%" height="15" fill="rgb(221,193,54)" fg:x="47" fg:w="1"/><text x="14.0735%" y="142.50"></text></g><g><title>default_free (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1 samples, 0.29%)</title><rect x="13.8235%" y="148" width="0.2941%" height="15" fill="rgb(248,212,6)" fg:x="47" fg:w="1"/><text x="14.0735%" y="158.50"></text></g><g><title>try_binary_elide (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (2 samples, 0.59%)</title><rect x="14.4118%" y="132" width="0.5882%" height="15" fill="rgb(208,68,35)" fg:x="49" fg:w="2"/><text x="14.6618%" y="142.50"></text></g><g><title>PyArray_Return (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1 samples, 0.29%)</title><rect x="16.7647%" y="148" width="0.2941%" height="15" fill="rgb(232,128,0)" fg:x="57" fg:w="1"/><text x="17.0147%" y="158.50"></text></g><g><title>_apply_array_wrap (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1 samples, 0.29%)</title><rect x="17.0588%" y="148" width="0.2941%" height="15" fill="rgb(207,160,47)" fg:x="58" fg:w="1"/><text x="17.3088%" y="158.50"></text></g><g><title>_find_array_method (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1 samples, 0.29%)</title><rect x="17.3529%" y="148" width="0.2941%" height="15" fill="rgb(228,23,34)" fg:x="59" fg:w="1"/><text x="17.6029%" y="158.50"></text></g><g><title>promote_and_get_ufuncimpl (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (6 samples, 1.76%)</title><rect x="17.6471%" y="148" width="1.7647%" height="15" fill="rgb(218,30,26)" fg:x="60" fg:w="6"/><text x="17.8971%" y="158.50"></text></g><g><title>promote_and_get_info_and_ufuncimpl (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (5 samples, 1.47%)</title><rect x="17.9412%" y="164" width="1.4706%" height="15" fill="rgb(220,122,19)" fg:x="61" fg:w="5"/><text x="18.1912%" y="174.50"></text></g><g><title>PyArrayIdentityHash_GetItem (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (5 samples, 1.47%)</title><rect x="17.9412%" y="180" width="1.4706%" height="15" fill="rgb(250,228,42)" fg:x="61" fg:w="5"/><text x="18.1912%" y="190.50"></text></g><g><title>0x7f3140261cd8 (libc-2.31.so) (1 samples, 0.29%)</title><rect x="19.1176%" y="196" width="0.2941%" height="15" fill="rgb(240,193,28)" fg:x="65" fg:w="1"/><text x="19.3676%" y="206.50"></text></g><g><title>resolve_descriptors (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1 samples, 0.29%)</title><rect x="19.4118%" y="148" width="0.2941%" height="15" fill="rgb(216,20,37)" fg:x="66" fg:w="1"/><text x="19.6618%" y="158.50"></text></g><g><title>PyArray_UpdateFlags (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1 samples, 0.29%)</title><rect x="21.7647%" y="196" width="0.2941%" height="15" fill="rgb(206,188,39)" fg:x="74" fg:w="1"/><text x="22.0147%" y="206.50"></text></g><g><title>IsAligned (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1 samples, 0.29%)</title><rect x="21.7647%" y="212" width="0.2941%" height="15" fill="rgb(217,207,13)" fg:x="74" fg:w="1"/><text x="22.0147%" y="222.50"></text></g><g><title>PyDataMem_GetHandler (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1 samples, 0.29%)</title><rect x="22.0588%" y="196" width="0.2941%" height="15" fill="rgb(231,73,38)" fg:x="75" fg:w="1"/><text x="22.3088%" y="206.50"></text></g><g><title>PyDataMem_UserNEW (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1 samples, 0.29%)</title><rect x="22.3529%" y="196" width="0.2941%" height="15" fill="rgb(225,20,46)" fg:x="76" fg:w="1"/><text x="22.6029%" y="206.50"></text></g><g><title>0x7f3140260a06 (libc-2.31.so) (1 samples, 0.29%)</title><rect x="22.3529%" y="212" width="0.2941%" height="15" fill="rgb(210,31,41)" fg:x="76" fg:w="1"/><text x="22.6029%" y="222.50"></text></g><g><title>_array_fill_strides (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1 samples, 0.29%)</title><rect x="22.6471%" y="196" width="0.2941%" height="15" fill="rgb(221,200,47)" fg:x="77" fg:w="1"/><text x="22.8971%" y="206.50"></text></g><g><title>PyArray_NewFromDescr (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (6 samples, 1.76%)</title><rect x="21.4706%" y="164" width="1.7647%" height="15" fill="rgb(226,26,5)" fg:x="73" fg:w="6"/><text x="21.7206%" y="174.50"></text></g><g><title>PyArray_NewFromDescr_int (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (6 samples, 1.76%)</title><rect x="21.4706%" y="180" width="1.7647%" height="15" fill="rgb(249,33,26)" fg:x="73" fg:w="6"/><text x="21.7206%" y="190.50"></text></g><g><title>npy_alloc_cache_dim (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1 samples, 0.29%)</title><rect x="22.9412%" y="196" width="0.2941%" height="15" fill="rgb(235,183,28)" fg:x="78" fg:w="1"/><text x="23.1912%" y="206.50"></text></g><g><title>generic_wrapped_legacy_loop (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (3 samples, 0.88%)</title><rect x="23.2353%" y="164" width="0.8824%" height="15" fill="rgb(221,5,38)" fg:x="79" fg:w="3"/><text x="23.4853%" y="174.50"></text></g><g><title>DOUBLE_subtract_AVX512F (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (3 samples, 0.88%)</title><rect x="23.2353%" y="180" width="0.8824%" height="15" fill="rgb(247,18,42)" fg:x="79" fg:w="3"/><text x="23.4853%" y="190.50"></text></g><g><title>array_subtract (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (41 samples, 12.06%)</title><rect x="14.1176%" y="116" width="12.0588%" height="15" fill="rgb(241,131,45)" fg:x="48" fg:w="41"/><text x="14.3676%" y="126.50">array_subtract (nu..</text></g><g><title>ufunc_generic_fastcall (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (38 samples, 11.18%)</title><rect x="15.0000%" y="132" width="11.1765%" height="15" fill="rgb(249,31,29)" fg:x="51" fg:w="38"/><text x="15.2500%" y="142.50">ufunc_generic_fa..</text></g><g><title>try_trivial_single_output_loop (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (22 samples, 6.47%)</title><rect x="19.7059%" y="148" width="6.4706%" height="15" fill="rgb(225,111,53)" fg:x="67" fg:w="22"/><text x="19.9559%" y="158.50">try_triv..</text></g><g><title>get_wrapped_legacy_ufunc_loop (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (7 samples, 2.06%)</title><rect x="24.1176%" y="164" width="2.0588%" height="15" fill="rgb(238,160,17)" fg:x="82" fg:w="7"/><text x="24.3676%" y="174.50">g..</text></g><g><title>PyUFunc_DefaultLegacyInnerLoopSelector (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (5 samples, 1.47%)</title><rect x="24.7059%" y="180" width="1.4706%" height="15" fill="rgb(214,148,48)" fg:x="84" fg:w="5"/><text x="24.9559%" y="190.50"></text></g><g><title>double_richcompare (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1 samples, 0.29%)</title><rect x="26.1765%" y="116" width="0.2941%" height="15" fill="rgb(232,36,49)" fg:x="89" fg:w="1"/><text x="26.4265%" y="126.50"></text></g><g><title>norm (&lt;__array_function__ internals&gt;:179) (8 samples, 2.35%)</title><rect x="26.4706%" y="116" width="2.3529%" height="15" fill="rgb(209,103,24)" fg:x="90" fg:w="8"/><text x="26.7206%" y="126.50">n..</text></g><g><title>array_dealloc (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1 samples, 0.29%)</title><rect x="33.8235%" y="148" width="0.2941%" height="15" fill="rgb(229,88,8)" fg:x="115" fg:w="1"/><text x="34.0735%" y="158.50"></text></g><g><title>array_implement_array_function_internal (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (2 samples, 0.59%)</title><rect x="34.1176%" y="148" width="0.5882%" height="15" fill="rgb(213,181,19)" fg:x="116" fg:w="2"/><text x="34.3676%" y="158.50"></text></g><g><title>get_implementing_args_and_methods (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1 samples, 0.29%)</title><rect x="34.4118%" y="164" width="0.2941%" height="15" fill="rgb(254,191,54)" fg:x="117" fg:w="1"/><text x="34.6618%" y="174.50"></text></g><g><title>norm (numpy/linalg/linalg.py:2508) (6 samples, 1.76%)</title><rect x="34.7059%" y="148" width="1.7647%" height="15" fill="rgb(241,83,37)" fg:x="118" fg:w="6"/><text x="34.9559%" y="158.50"></text></g><g><title>array_asarray (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1 samples, 0.29%)</title><rect x="36.1765%" y="164" width="0.2941%" height="15" fill="rgb(233,36,39)" fg:x="123" fg:w="1"/><text x="36.4265%" y="174.50"></text></g><g><title>norm (numpy/linalg/linalg.py:2510) (19 samples, 5.59%)</title><rect x="36.4706%" y="148" width="5.5882%" height="15" fill="rgb(226,3,54)" fg:x="124" fg:w="19"/><text x="36.7206%" y="158.50">norm (n..</text></g><g><title>norm (numpy/linalg/linalg.py:2514) (2 samples, 0.59%)</title><rect x="42.0588%" y="148" width="0.5882%" height="15" fill="rgb(245,192,40)" fg:x="143" fg:w="2"/><text x="42.3088%" y="158.50"></text></g><g><title>norm (numpy/linalg/linalg.py:2515) (3 samples, 0.88%)</title><rect x="42.6471%" y="148" width="0.8824%" height="15" fill="rgb(238,167,29)" fg:x="145" fg:w="3"/><text x="42.8971%" y="158.50"></text></g><g><title>norm (numpy/linalg/linalg.py:2516) (1 samples, 0.29%)</title><rect x="43.5294%" y="148" width="0.2941%" height="15" fill="rgb(232,182,51)" fg:x="148" fg:w="1"/><text x="43.7794%" y="158.50"></text></g><g><title>PyArray_Ravel (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (4 samples, 1.18%)</title><rect x="46.4706%" y="180" width="1.1765%" height="15" fill="rgb(231,60,39)" fg:x="158" fg:w="4"/><text x="46.7206%" y="190.50"></text></g><g><title>PyArray_Newshape (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (4 samples, 1.18%)</title><rect x="46.4706%" y="196" width="1.1765%" height="15" fill="rgb(208,69,12)" fg:x="158" fg:w="4"/><text x="46.7206%" y="206.50"></text></g><g><title>PyArray_NewFromDescr_int (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (3 samples, 0.88%)</title><rect x="46.7647%" y="212" width="0.8824%" height="15" fill="rgb(235,93,37)" fg:x="159" fg:w="3"/><text x="47.0147%" y="222.50"></text></g><g><title>PyArray_UpdateFlags (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (2 samples, 0.59%)</title><rect x="47.0588%" y="228" width="0.5882%" height="15" fill="rgb(213,116,39)" fg:x="160" fg:w="2"/><text x="47.3088%" y="238.50"></text></g><g><title>IsAligned (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1 samples, 0.29%)</title><rect x="47.3529%" y="244" width="0.2941%" height="15" fill="rgb(222,207,29)" fg:x="161" fg:w="1"/><text x="47.6029%" y="254.50"></text></g><g><title>norm (numpy/linalg/linalg.py:2520) (17 samples, 5.00%)</title><rect x="43.8235%" y="148" width="5.0000%" height="15" fill="rgb(206,96,30)" fg:x="149" fg:w="17"/><text x="44.0735%" y="158.50">norm (..</text></g><g><title>array_ravel (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (8 samples, 2.35%)</title><rect x="46.4706%" y="164" width="2.3529%" height="15" fill="rgb(218,138,4)" fg:x="158" fg:w="8"/><text x="46.7206%" y="174.50">a..</text></g><g><title>_npy_parse_arguments (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (4 samples, 1.18%)</title><rect x="47.6471%" y="180" width="1.1765%" height="15" fill="rgb(250,191,14)" fg:x="162" fg:w="4"/><text x="47.8971%" y="190.50"></text></g><g><title>string_converter_helper (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (2 samples, 0.59%)</title><rect x="48.2353%" y="196" width="0.5882%" height="15" fill="rgb(239,60,40)" fg:x="164" fg:w="2"/><text x="48.4853%" y="206.50"></text></g><g><title>order_parser (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1 samples, 0.29%)</title><rect x="48.5294%" y="212" width="0.2941%" height="15" fill="rgb(206,27,48)" fg:x="165" fg:w="1"/><text x="48.7794%" y="222.50"></text></g><g><title>norm (numpy/linalg/linalg.py:2521) (16 samples, 4.71%)</title><rect x="48.8235%" y="148" width="4.7059%" height="15" fill="rgb(225,35,8)" fg:x="166" fg:w="16"/><text x="49.0735%" y="158.50">norm ..</text></g><g><title>isComplexType (numpy/linalg/linalg.py:118) (7 samples, 2.06%)</title><rect x="51.4706%" y="164" width="2.0588%" height="15" fill="rgb(250,213,24)" fg:x="175" fg:w="7"/><text x="51.7206%" y="174.50">i..</text></g><g><title>PyArray_DiscoverDTypeAndShape (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (5 samples, 1.47%)</title><rect x="56.4706%" y="212" width="1.4706%" height="15" fill="rgb(247,123,22)" fg:x="192" fg:w="5"/><text x="56.7206%" y="222.50"></text></g><g><title>PyArray_DiscoverDTypeAndShape_Recursive (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (4 samples, 1.18%)</title><rect x="56.7647%" y="228" width="1.1765%" height="15" fill="rgb(231,138,38)" fg:x="193" fg:w="4"/><text x="57.0147%" y="238.50"></text></g><g><title>discover_dtype_from_pyobject (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (2 samples, 0.59%)</title><rect x="57.3529%" y="244" width="0.5882%" height="15" fill="rgb(231,145,46)" fg:x="195" fg:w="2"/><text x="57.6029%" y="254.50"></text></g><g><title>python_builtins_are_known_scalar_types (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (2 samples, 0.59%)</title><rect x="57.3529%" y="260" width="0.5882%" height="15" fill="rgb(251,118,11)" fg:x="195" fg:w="2"/><text x="57.6029%" y="270.50"></text></g><g><title>PyArray_ExtractDTypeAndDescriptor (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1 samples, 0.29%)</title><rect x="57.9412%" y="212" width="0.2941%" height="15" fill="rgb(217,147,25)" fg:x="197" fg:w="1"/><text x="58.1912%" y="222.50"></text></g><g><title>PyArray_FromArray (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (2 samples, 0.59%)</title><rect x="58.2353%" y="212" width="0.5882%" height="15" fill="rgb(247,81,37)" fg:x="198" fg:w="2"/><text x="58.4853%" y="222.50"></text></g><g><title>PyArray_CanCastArrayTo (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (2 samples, 0.59%)</title><rect x="58.2353%" y="228" width="0.5882%" height="15" fill="rgb(209,12,38)" fg:x="198" fg:w="2"/><text x="58.4853%" y="238.50"></text></g><g><title>PyArray_CheckCastSafety (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (2 samples, 0.59%)</title><rect x="58.2353%" y="244" width="0.5882%" height="15" fill="rgb(227,1,9)" fg:x="198" fg:w="2"/><text x="58.4853%" y="254.50"></text></g><g><title>PyArray_GetCastingImpl (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (2 samples, 0.59%)</title><rect x="58.2353%" y="260" width="0.5882%" height="15" fill="rgb(248,47,43)" fg:x="198" fg:w="2"/><text x="58.4853%" y="270.50"></text></g><g><title>PyArray_FromAny (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (11 samples, 3.24%)</title><rect x="55.8824%" y="196" width="3.2353%" height="15" fill="rgb(221,10,30)" fg:x="190" fg:w="11"/><text x="56.1324%" y="206.50">PyA..</text></g><g><title>npy_unlink_coercion_cache (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1 samples, 0.29%)</title><rect x="58.8235%" y="212" width="0.2941%" height="15" fill="rgb(210,229,1)" fg:x="200" fg:w="1"/><text x="59.0735%" y="222.50"></text></g><g><title>PyArray_DTypeFromObject (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (5 samples, 1.47%)</title><rect x="59.7059%" y="212" width="1.4706%" height="15" fill="rgb(222,148,37)" fg:x="203" fg:w="5"/><text x="59.9559%" y="222.50"></text></g><g><title>PyArray_DiscoverDTypeAndShape (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (5 samples, 1.47%)</title><rect x="59.7059%" y="228" width="1.4706%" height="15" fill="rgb(234,67,33)" fg:x="203" fg:w="5"/><text x="59.9559%" y="238.50"></text></g><g><title>PyArray_DiscoverDTypeAndShape_Recursive (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (5 samples, 1.47%)</title><rect x="59.7059%" y="244" width="1.4706%" height="15" fill="rgb(247,98,35)" fg:x="203" fg:w="5"/><text x="59.9559%" y="254.50"></text></g><g><title>PyArray_PromoteTypes (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (4 samples, 1.18%)</title><rect x="60.0000%" y="260" width="1.1765%" height="15" fill="rgb(247,138,52)" fg:x="204" fg:w="4"/><text x="60.2500%" y="270.50"></text></g><g><title>PyArray_CommonDType (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (4 samples, 1.18%)</title><rect x="60.0000%" y="276" width="1.1765%" height="15" fill="rgb(213,79,30)" fg:x="204" fg:w="4"/><text x="60.2500%" y="286.50"></text></g><g><title>default_builtin_common_dtype (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (4 samples, 1.18%)</title><rect x="60.0000%" y="292" width="1.1765%" height="15" fill="rgb(246,177,23)" fg:x="204" fg:w="4"/><text x="60.2500%" y="302.50"></text></g><g><title>PyArray_ObjectType (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (10 samples, 2.94%)</title><rect x="59.1176%" y="196" width="2.9412%" height="15" fill="rgb(230,62,27)" fg:x="201" fg:w="10"/><text x="59.3676%" y="206.50">Py..</text></g><g><title>PyArray_DescrFromType (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (3 samples, 0.88%)</title><rect x="61.1765%" y="212" width="0.8824%" height="15" fill="rgb(216,154,8)" fg:x="208" fg:w="3"/><text x="61.4265%" y="222.50"></text></g><g><title>0x7f3140268a52 (libc-2.31.so) (1 samples, 0.29%)</title><rect x="62.9412%" y="212" width="0.2941%" height="15" fill="rgb(244,35,45)" fg:x="214" fg:w="1"/><text x="63.1912%" y="222.50"></text></g><g><title>0x7f3136654370 (libmkl_intel_thread.so.1) (1 samples, 0.29%)</title><rect x="64.4118%" y="276" width="0.2941%" height="15" fill="rgb(251,115,12)" fg:x="219" fg:w="1"/><text x="64.6618%" y="286.50"></text></g><g><title>DOUBLE_dot (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (7 samples, 2.06%)</title><rect x="63.2353%" y="212" width="2.0588%" height="15" fill="rgb(240,54,50)" fg:x="215" fg:w="7"/><text x="63.4853%" y="222.50">D..</text></g><g><title>cblas_ddot (libmkl_intel_lp64.so.1) (4 samples, 1.18%)</title><rect x="64.1176%" y="228" width="1.1765%" height="15" fill="rgb(233,84,52)" fg:x="218" fg:w="4"/><text x="64.3676%" y="238.50"></text></g><g><title>mkl_blas__ddot (libmkl_intel_lp64.so.1) (4 samples, 1.18%)</title><rect x="64.1176%" y="244" width="1.1765%" height="15" fill="rgb(207,117,47)" fg:x="218" fg:w="4"/><text x="64.3676%" y="254.50"></text></g><g><title>mkl_blas_ddot (libmkl_intel_thread.so.1) (3 samples, 0.88%)</title><rect x="64.4118%" y="260" width="0.8824%" height="15" fill="rgb(249,43,39)" fg:x="219" fg:w="3"/><text x="64.6618%" y="270.50"></text></g><g><title>mkl_blas_avx512_xddot (libmkl_avx512.so.1) (2 samples, 0.59%)</title><rect x="64.7059%" y="276" width="0.5882%" height="15" fill="rgb(209,38,44)" fg:x="220" fg:w="2"/><text x="64.9559%" y="286.50"></text></g><g><title>gentype_alloc (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1 samples, 0.29%)</title><rect x="65.8824%" y="244" width="0.2941%" height="15" fill="rgb(236,212,23)" fg:x="224" fg:w="1"/><text x="66.1324%" y="254.50"></text></g><g><title>PyArray_Scalar (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (3 samples, 0.88%)</title><rect x="65.5882%" y="228" width="0.8824%" height="15" fill="rgb(242,79,21)" fg:x="223" fg:w="3"/><text x="65.8382%" y="238.50"></text></g><g><title>scalar_value (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1 samples, 0.29%)</title><rect x="66.1765%" y="244" width="0.2941%" height="15" fill="rgb(211,96,35)" fg:x="225" fg:w="1"/><text x="66.4265%" y="254.50"></text></g><g><title>PyDataMem_UserFREE (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (3 samples, 0.88%)</title><rect x="67.0588%" y="244" width="0.8824%" height="15" fill="rgb(253,215,40)" fg:x="228" fg:w="3"/><text x="67.3088%" y="254.50"></text></g><g><title>0x7f3140260a06 (libc-2.31.so) (1 samples, 0.29%)</title><rect x="67.6471%" y="260" width="0.2941%" height="15" fill="rgb(211,81,21)" fg:x="230" fg:w="1"/><text x="67.8971%" y="270.50"></text></g><g><title>PyArray_Return (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (10 samples, 2.94%)</title><rect x="65.2941%" y="212" width="2.9412%" height="15" fill="rgb(208,190,38)" fg:x="222" fg:w="10"/><text x="65.5441%" y="222.50">Py..</text></g><g><title>array_dealloc (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (6 samples, 1.76%)</title><rect x="66.4706%" y="228" width="1.7647%" height="15" fill="rgb(235,213,38)" fg:x="226" fg:w="6"/><text x="66.7206%" y="238.50"></text></g><g><title>free (libc-2.31.so) (1 samples, 0.29%)</title><rect x="67.9412%" y="244" width="0.2941%" height="15" fill="rgb(237,122,38)" fg:x="231" fg:w="1"/><text x="68.1912%" y="254.50"></text></g><g><title>__GI___pthread_mutex_unlock (libpthread-2.31.so) (1 samples, 0.29%)</title><rect x="68.2353%" y="212" width="0.2941%" height="15" fill="rgb(244,218,35)" fg:x="232" fg:w="1"/><text x="68.4853%" y="222.50"></text></g><g><title>__errno_location (libpthread-2.31.so) (1 samples, 0.29%)</title><rect x="68.5294%" y="212" width="0.2941%" height="15" fill="rgb(240,68,47)" fg:x="233" fg:w="1"/><text x="68.7794%" y="222.50"></text></g><g><title>_bad_strides (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1 samples, 0.29%)</title><rect x="68.8235%" y="212" width="0.2941%" height="15" fill="rgb(210,16,53)" fg:x="234" fg:w="1"/><text x="69.0735%" y="222.50"></text></g><g><title>PyArray_New (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1 samples, 0.29%)</title><rect x="69.7059%" y="228" width="0.2941%" height="15" fill="rgb(235,124,12)" fg:x="237" fg:w="1"/><text x="69.9559%" y="238.50"></text></g><g><title>PyArray_DescrFromType (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1 samples, 0.29%)</title><rect x="69.7059%" y="244" width="0.2941%" height="15" fill="rgb(224,169,11)" fg:x="237" fg:w="1"/><text x="69.9559%" y="254.50"></text></g><g><title>PyArray_UpdateFlags (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1 samples, 0.29%)</title><rect x="71.4706%" y="260" width="0.2941%" height="15" fill="rgb(250,166,2)" fg:x="243" fg:w="1"/><text x="71.7206%" y="270.50"></text></g><g><title>IsAligned (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1 samples, 0.29%)</title><rect x="71.4706%" y="276" width="0.2941%" height="15" fill="rgb(242,216,29)" fg:x="243" fg:w="1"/><text x="71.7206%" y="286.50"></text></g><g><title>PyDataMem_GetHandler (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1 samples, 0.29%)</title><rect x="71.7647%" y="260" width="0.2941%" height="15" fill="rgb(230,116,27)" fg:x="244" fg:w="1"/><text x="72.0147%" y="270.50"></text></g><g><title>0x7f3140260a06 (libc-2.31.so) (1 samples, 0.29%)</title><rect x="72.0588%" y="276" width="0.2941%" height="15" fill="rgb(228,99,48)" fg:x="245" fg:w="1"/><text x="72.3088%" y="286.50"></text></g><g><title>new_array_for_sum (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (12 samples, 3.53%)</title><rect x="69.1176%" y="212" width="3.5294%" height="15" fill="rgb(253,11,6)" fg:x="235" fg:w="12"/><text x="69.3676%" y="222.50">new..</text></g><g><title>PyArray_NewFromDescr (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (9 samples, 2.65%)</title><rect x="70.0000%" y="228" width="2.6471%" height="15" fill="rgb(247,143,39)" fg:x="238" fg:w="9"/><text x="70.2500%" y="238.50">Py..</text></g><g><title>PyArray_NewFromDescr_int (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (9 samples, 2.65%)</title><rect x="70.0000%" y="244" width="2.6471%" height="15" fill="rgb(236,97,10)" fg:x="238" fg:w="9"/><text x="70.2500%" y="254.50">Py..</text></g><g><title>PyDataMem_UserNEW (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (2 samples, 0.59%)</title><rect x="72.0588%" y="260" width="0.5882%" height="15" fill="rgb(233,208,19)" fg:x="245" fg:w="2"/><text x="72.3088%" y="270.50"></text></g><g><title>0x7f3140260a0e (libc-2.31.so) (1 samples, 0.29%)</title><rect x="72.3529%" y="276" width="0.2941%" height="15" fill="rgb(216,164,2)" fg:x="246" fg:w="1"/><text x="72.6029%" y="286.50"></text></g><g><title>pthread_mutex_lock (libpthread-2.31.so) (1 samples, 0.29%)</title><rect x="72.6471%" y="212" width="0.2941%" height="15" fill="rgb(220,129,5)" fg:x="247" fg:w="1"/><text x="72.8971%" y="222.50"></text></g><g><title>PyArray_MatrixProduct2 (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (62 samples, 18.24%)</title><rect x="55.0000%" y="180" width="18.2353%" height="15" fill="rgb(242,17,10)" fg:x="187" fg:w="62"/><text x="55.2500%" y="190.50">PyArray_MatrixProduct2 (nump..</text></g><g><title>cblas_matrixproduct (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (38 samples, 11.18%)</title><rect x="62.0588%" y="196" width="11.1765%" height="15" fill="rgb(242,107,0)" fg:x="211" fg:w="38"/><text x="62.3088%" y="206.50">cblas_matrixprod..</text></g><g><title>pthread_mutex_unlock (libpthread-2.31.so) (1 samples, 0.29%)</title><rect x="72.9412%" y="212" width="0.2941%" height="15" fill="rgb(251,28,31)" fg:x="248" fg:w="1"/><text x="73.1912%" y="222.50"></text></g><g><title>PyArray_Return (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (4 samples, 1.18%)</title><rect x="73.2353%" y="180" width="1.1765%" height="15" fill="rgb(233,223,10)" fg:x="249" fg:w="4"/><text x="73.4853%" y="190.50"></text></g><g><title>norm (numpy/linalg/linalg.py:2526) (72 samples, 21.18%)</title><rect x="53.5294%" y="148" width="21.1765%" height="15" fill="rgb(215,21,27)" fg:x="182" fg:w="72"/><text x="53.7794%" y="158.50">norm (numpy/linalg/linalg.py:2526)</text></g><g><title>array_dot (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (67 samples, 19.71%)</title><rect x="55.0000%" y="164" width="19.7059%" height="15" fill="rgb(232,23,21)" fg:x="187" fg:w="67"/><text x="55.2500%" y="174.50">array_dot (numpy/core/_multiarr..</text></g><g><title>_npy_parse_arguments (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1 samples, 0.29%)</title><rect x="74.4118%" y="180" width="0.2941%" height="15" fill="rgb(244,5,23)" fg:x="253" fg:w="1"/><text x="74.6618%" y="190.50"></text></g><g><title>0x7f3140268950 (libc-2.31.so) (1 samples, 0.29%)</title><rect x="78.8235%" y="180" width="0.2941%" height="15" fill="rgb(226,81,46)" fg:x="268" fg:w="1"/><text x="79.0735%" y="190.50"></text></g><g><title>discover_dtype_from_pyobject (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (8 samples, 2.35%)</title><rect x="79.1176%" y="228" width="2.3529%" height="15" fill="rgb(247,70,30)" fg:x="269" fg:w="8"/><text x="79.3676%" y="238.50">d..</text></g><g><title>PyArray_DiscoverDTypeAndShape (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (11 samples, 3.24%)</title><rect x="79.1176%" y="196" width="3.2353%" height="15" fill="rgb(212,68,19)" fg:x="269" fg:w="11"/><text x="79.3676%" y="206.50">PyA..</text></g><g><title>PyArray_DiscoverDTypeAndShape_Recursive (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (11 samples, 3.24%)</title><rect x="79.1176%" y="212" width="3.2353%" height="15" fill="rgb(240,187,13)" fg:x="269" fg:w="11"/><text x="79.3676%" y="222.50">PyA..</text></g><g><title>handle_scalar (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (3 samples, 0.88%)</title><rect x="81.4706%" y="228" width="0.8824%" height="15" fill="rgb(223,113,26)" fg:x="277" fg:w="3"/><text x="81.7206%" y="238.50"></text></g><g><title>nonparametric_discover_descr_from_pyobject (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (2 samples, 0.59%)</title><rect x="81.7647%" y="244" width="0.5882%" height="15" fill="rgb(206,192,2)" fg:x="278" fg:w="2"/><text x="82.0147%" y="254.50"></text></g><g><title>PyArray_UpdateFlags (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1 samples, 0.29%)</title><rect x="82.3529%" y="212" width="0.2941%" height="15" fill="rgb(241,108,4)" fg:x="280" fg:w="1"/><text x="82.6029%" y="222.50"></text></g><g><title>PyDataMem_GetHandler (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1 samples, 0.29%)</title><rect x="82.6471%" y="212" width="0.2941%" height="15" fill="rgb(247,173,49)" fg:x="281" fg:w="1"/><text x="82.8971%" y="222.50"></text></g><g><title>PyArray_NewFromDescr_int (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (3 samples, 0.88%)</title><rect x="82.3529%" y="196" width="0.8824%" height="15" fill="rgb(224,114,35)" fg:x="280" fg:w="3"/><text x="82.6029%" y="206.50"></text></g><g><title>PyDataMem_UserNEW (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1 samples, 0.29%)</title><rect x="82.9412%" y="212" width="0.2941%" height="15" fill="rgb(245,159,27)" fg:x="282" fg:w="1"/><text x="83.1912%" y="222.50"></text></g><g><title>PyArray_FromAny (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (18 samples, 5.29%)</title><rect x="79.1176%" y="180" width="5.2941%" height="15" fill="rgb(245,172,44)" fg:x="269" fg:w="18"/><text x="79.3676%" y="190.50">PyArra..</text></g><g><title>PyArray_Pack (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (4 samples, 1.18%)</title><rect x="83.2353%" y="196" width="1.1765%" height="15" fill="rgb(236,23,11)" fg:x="283" fg:w="4"/><text x="83.4853%" y="206.50"></text></g><g><title>DOUBLE_setitem (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1 samples, 0.29%)</title><rect x="84.1176%" y="212" width="0.2941%" height="15" fill="rgb(205,117,38)" fg:x="286" fg:w="1"/><text x="84.3676%" y="222.50"></text></g><g><title>PyArray_Scalar (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (2 samples, 0.59%)</title><rect x="85.5882%" y="196" width="0.5882%" height="15" fill="rgb(237,72,25)" fg:x="291" fg:w="2"/><text x="85.8382%" y="206.50"></text></g><g><title>gentype_alloc (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1 samples, 0.29%)</title><rect x="85.8824%" y="212" width="0.2941%" height="15" fill="rgb(244,70,9)" fg:x="292" fg:w="1"/><text x="86.1324%" y="222.50"></text></g><g><title>PyArray_Return (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (7 samples, 2.06%)</title><rect x="84.4118%" y="180" width="2.0588%" height="15" fill="rgb(217,125,39)" fg:x="287" fg:w="7"/><text x="84.6618%" y="190.50">P..</text></g><g><title>array_dealloc (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1 samples, 0.29%)</title><rect x="86.1765%" y="196" width="0.2941%" height="15" fill="rgb(235,36,10)" fg:x="293" fg:w="1"/><text x="86.4265%" y="206.50"></text></g><g><title>PyDataMem_UserFREE (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1 samples, 0.29%)</title><rect x="86.1765%" y="212" width="0.2941%" height="15" fill="rgb(251,123,47)" fg:x="293" fg:w="1"/><text x="86.4265%" y="222.50"></text></g><g><title>PyUFunc_CheckOverride (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1 samples, 0.29%)</title><rect x="86.4706%" y="180" width="0.2941%" height="15" fill="rgb(221,13,13)" fg:x="294" fg:w="1"/><text x="86.7206%" y="190.50"></text></g><g><title>_apply_array_wrap (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1 samples, 0.29%)</title><rect x="86.7647%" y="180" width="0.2941%" height="15" fill="rgb(238,131,9)" fg:x="295" fg:w="1"/><text x="87.0147%" y="190.50"></text></g><g><title>_find_array_method (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (2 samples, 0.59%)</title><rect x="87.0588%" y="180" width="0.5882%" height="15" fill="rgb(211,50,8)" fg:x="296" fg:w="2"/><text x="87.3088%" y="190.50"></text></g><g><title>_ufunc_setup_flags (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (3 samples, 0.88%)</title><rect x="87.6471%" y="180" width="0.8824%" height="15" fill="rgb(245,182,24)" fg:x="298" fg:w="3"/><text x="87.8971%" y="190.50"></text></g><g><title>array_dealloc (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (2 samples, 0.59%)</title><rect x="88.5294%" y="180" width="0.5882%" height="15" fill="rgb(242,14,37)" fg:x="301" fg:w="2"/><text x="88.7794%" y="190.50"></text></g><g><title>PyDataMem_UserFREE (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (2 samples, 0.59%)</title><rect x="88.5294%" y="196" width="0.5882%" height="15" fill="rgb(246,228,12)" fg:x="301" fg:w="2"/><text x="88.7794%" y="206.50"></text></g><g><title>promote_and_get_ufuncimpl (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (5 samples, 1.47%)</title><rect x="89.1176%" y="180" width="1.4706%" height="15" fill="rgb(213,55,15)" fg:x="303" fg:w="5"/><text x="89.3676%" y="190.50"></text></g><g><title>promote_and_get_info_and_ufuncimpl (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (4 samples, 1.18%)</title><rect x="89.4118%" y="196" width="1.1765%" height="15" fill="rgb(209,9,3)" fg:x="304" fg:w="4"/><text x="89.6618%" y="206.50"></text></g><g><title>PyArrayIdentityHash_GetItem (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (3 samples, 0.88%)</title><rect x="89.7059%" y="212" width="0.8824%" height="15" fill="rgb(230,59,30)" fg:x="305" fg:w="3"/><text x="89.9559%" y="222.50"></text></g><g><title>resolve_descriptors (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (2 samples, 0.59%)</title><rect x="90.5882%" y="180" width="0.5882%" height="15" fill="rgb(209,121,21)" fg:x="308" fg:w="2"/><text x="90.8382%" y="190.50"></text></g><g><title>simple_legacy_resolve_descriptors (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1 samples, 0.29%)</title><rect x="90.8824%" y="196" width="0.2941%" height="15" fill="rgb(220,109,13)" fg:x="309" fg:w="1"/><text x="91.1324%" y="206.50"></text></g><g><title>PyDataMem_GetHandler (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (2 samples, 0.59%)</title><rect x="92.9412%" y="228" width="0.5882%" height="15" fill="rgb(232,18,1)" fg:x="316" fg:w="2"/><text x="93.1912%" y="238.50"></text></g><g><title>PyArray_NewFromDescr (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (6 samples, 1.76%)</title><rect x="92.0588%" y="196" width="1.7647%" height="15" fill="rgb(215,41,42)" fg:x="313" fg:w="6"/><text x="92.3088%" y="206.50"></text></g><g><title>PyArray_NewFromDescr_int (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (6 samples, 1.76%)</title><rect x="92.0588%" y="212" width="1.7647%" height="15" fill="rgb(224,123,36)" fg:x="313" fg:w="6"/><text x="92.3088%" y="222.50"></text></g><g><title>PyDataMem_UserNEW (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1 samples, 0.29%)</title><rect x="93.5294%" y="228" width="0.2941%" height="15" fill="rgb(240,125,3)" fg:x="318" fg:w="1"/><text x="93.7794%" y="238.50"></text></g><g><title>_check_ufunc_fperr (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1 samples, 0.29%)</title><rect x="93.8235%" y="196" width="0.2941%" height="15" fill="rgb(205,98,50)" fg:x="319" fg:w="1"/><text x="94.0735%" y="206.50"></text></g><g><title>generic_wrapped_legacy_loop (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (2 samples, 0.59%)</title><rect x="94.1176%" y="196" width="0.5882%" height="15" fill="rgb(205,185,37)" fg:x="320" fg:w="2"/><text x="94.3676%" y="206.50"></text></g><g><title>DOUBLE_sqrt_SSE41 (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (2 samples, 0.59%)</title><rect x="94.1176%" y="212" width="0.5882%" height="15" fill="rgb(238,207,15)" fg:x="320" fg:w="2"/><text x="94.3676%" y="222.50"></text></g><g><title>norm (numpy/linalg/linalg.py:2527) (71 samples, 20.88%)</title><rect x="74.7059%" y="148" width="20.8824%" height="15" fill="rgb(213,199,42)" fg:x="254" fg:w="71"/><text x="74.9559%" y="158.50">norm (numpy/linalg/linalg.py:2527)</text></g><g><title>ufunc_generic_fastcall (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (67 samples, 19.71%)</title><rect x="75.8824%" y="164" width="19.7059%" height="15" fill="rgb(235,201,11)" fg:x="258" fg:w="67"/><text x="76.1324%" y="174.50">ufunc_generic_fastcall (numpy/c..</text></g><g><title>try_trivial_single_output_loop (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (15 samples, 4.41%)</title><rect x="91.1765%" y="180" width="4.4118%" height="15" fill="rgb(207,46,11)" fg:x="310" fg:w="15"/><text x="91.4265%" y="190.50">try_t..</text></g><g><title>get_wrapped_legacy_ufunc_loop (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (3 samples, 0.88%)</title><rect x="94.7059%" y="196" width="0.8824%" height="15" fill="rgb(241,35,35)" fg:x="322" fg:w="3"/><text x="94.9559%" y="206.50"></text></g><g><title>PyUFunc_DefaultLegacyInnerLoopSelector (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (3 samples, 0.88%)</title><rect x="94.7059%" y="212" width="0.8824%" height="15" fill="rgb(243,32,47)" fg:x="322" fg:w="3"/><text x="94.9559%" y="222.50"></text></g><g><title>norm (numpy/linalg/linalg.py:2528) (1 samples, 0.29%)</title><rect x="95.5882%" y="148" width="0.2941%" height="15" fill="rgb(247,202,23)" fg:x="325" fg:w="1"/><text x="95.8382%" y="158.50"></text></g><g><title>main (poly_match_v1.py:87) (327 samples, 96.18%)</title><rect x="0.0000%" y="84" width="96.1765%" height="15" fill="rgb(219,102,11)" fg:x="0" fg:w="327"/><text x="0.2500%" y="94.50">main (poly_match_v1.py:87)</text></g><g><title>find_close_polygons (poly_match_v1.py:61) (321 samples, 94.41%)</title><rect x="1.7647%" y="100" width="94.4118%" height="15" fill="rgb(243,110,44)" fg:x="6" fg:w="321"/><text x="2.0147%" y="110.50">find_close_polygons (poly_match_v1.py:61)</text></g><g><title>norm (&lt;__array_function__ internals&gt;:180) (229 samples, 67.35%)</title><rect x="28.8235%" y="116" width="67.3529%" height="15" fill="rgb(222,74,54)" fg:x="98" fg:w="229"/><text x="29.0735%" y="126.50">norm (&lt;__array_function__ internals&gt;:180)</text></g><g><title>array_implement_array_function (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (225 samples, 66.18%)</title><rect x="30.0000%" y="132" width="66.1765%" height="15" fill="rgb(216,99,12)" fg:x="102" fg:w="225"/><text x="30.2500%" y="142.50">array_implement_array_function (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so)</text></g><g><title>norm (numpy/linalg/linalg.py:2530) (1 samples, 0.29%)</title><rect x="95.8824%" y="148" width="0.2941%" height="15" fill="rgb(226,22,26)" fg:x="326" fg:w="1"/><text x="96.1324%" y="158.50"></text></g><g><title>area (poly_match_v1.py:21) (1 samples, 0.29%)</title><rect x="96.1765%" y="116" width="0.2941%" height="15" fill="rgb(217,163,10)" fg:x="327" fg:w="1"/><text x="96.4265%" y="126.50"></text></g><g><title>area (poly_match_v1.py:22) (1 samples, 0.29%)</title><rect x="96.4706%" y="116" width="0.2941%" height="15" fill="rgb(213,25,53)" fg:x="328" fg:w="1"/><text x="96.7206%" y="126.50"></text></g><g><title>ufunc_generic_fastcall (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1 samples, 0.29%)</title><rect x="96.4706%" y="132" width="0.2941%" height="15" fill="rgb(252,105,26)" fg:x="328" fg:w="1"/><text x="96.7206%" y="142.50"></text></g><g><title>promote_and_get_ufuncimpl (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1 samples, 0.29%)</title><rect x="96.4706%" y="148" width="0.2941%" height="15" fill="rgb(220,39,43)" fg:x="328" fg:w="1"/><text x="96.7206%" y="158.50"></text></g><g><title>promote_and_get_info_and_ufuncimpl (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1 samples, 0.29%)</title><rect x="96.4706%" y="164" width="0.2941%" height="15" fill="rgb(229,68,48)" fg:x="328" fg:w="1"/><text x="96.7206%" y="174.50"></text></g><g><title>PyArrayIdentityHash_GetItem (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1 samples, 0.29%)</title><rect x="96.4706%" y="180" width="0.2941%" height="15" fill="rgb(252,8,32)" fg:x="328" fg:w="1"/><text x="96.7206%" y="190.50"></text></g><g><title>dot (&lt;__array_function__ internals&gt;:179) (1 samples, 0.29%)</title><rect x="96.7647%" y="132" width="0.2941%" height="15" fill="rgb(223,20,43)" fg:x="329" fg:w="1"/><text x="97.0147%" y="142.50"></text></g><g><title>dot (&lt;__array_function__ internals&gt;:180) (1 samples, 0.29%)</title><rect x="97.0588%" y="132" width="0.2941%" height="15" fill="rgb(229,81,49)" fg:x="330" fg:w="1"/><text x="97.3088%" y="142.50"></text></g><g><title>array_implement_array_function (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1 samples, 0.29%)</title><rect x="97.0588%" y="148" width="0.2941%" height="15" fill="rgb(236,28,36)" fg:x="330" fg:w="1"/><text x="97.3088%" y="158.50"></text></g><g><title>array_matrixproduct (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1 samples, 0.29%)</title><rect x="97.0588%" y="164" width="0.2941%" height="15" fill="rgb(249,185,26)" fg:x="330" fg:w="1"/><text x="97.3088%" y="174.50"></text></g><g><title>PyArray_MatrixProduct2 (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1 samples, 0.29%)</title><rect x="97.0588%" y="180" width="0.2941%" height="15" fill="rgb(249,174,33)" fg:x="330" fg:w="1"/><text x="97.3088%" y="190.50"></text></g><g><title>cblas_matrixproduct (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1 samples, 0.29%)</title><rect x="97.0588%" y="196" width="0.2941%" height="15" fill="rgb(233,201,37)" fg:x="330" fg:w="1"/><text x="97.3088%" y="206.50"></text></g><g><title>DOUBLE_dot (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1 samples, 0.29%)</title><rect x="97.0588%" y="212" width="0.2941%" height="15" fill="rgb(221,78,26)" fg:x="330" fg:w="1"/><text x="97.3088%" y="222.50"></text></g><g><title>cblas_ddot (libmkl_intel_lp64.so.1) (1 samples, 0.29%)</title><rect x="97.0588%" y="228" width="0.2941%" height="15" fill="rgb(250,127,30)" fg:x="330" fg:w="1"/><text x="97.3088%" y="238.50"></text></g><g><title>ddot_ (libmkl_rt.so.1) (1 samples, 0.29%)</title><rect x="97.0588%" y="244" width="0.2941%" height="15" fill="rgb(230,49,44)" fg:x="330" fg:w="1"/><text x="97.3088%" y="254.50"></text></g><g><title>roll (numpy/core/numeric.py:1239) (1 samples, 0.29%)</title><rect x="97.3529%" y="212" width="0.2941%" height="15" fill="rgb(229,67,23)" fg:x="331" fg:w="1"/><text x="97.6029%" y="222.50"></text></g><g><title>&lt;module&gt; (measure.py:16) (333 samples, 97.94%)</title><rect x="0.0000%" y="68" width="97.9412%" height="15" fill="rgb(249,83,47)" fg:x="0" fg:w="333"/><text x="0.2500%" y="78.50">&lt;module&gt; (measure.py:16)</text></g><g><title>main (poly_match_v1.py:94) (6 samples, 1.76%)</title><rect x="96.1765%" y="84" width="1.7647%" height="15" fill="rgb(215,43,3)" fg:x="327" fg:w="6"/><text x="96.4265%" y="94.50"></text></g><g><title>select_best_polygon (poly_match_v1.py:75) (6 samples, 1.76%)</title><rect x="96.1765%" y="100" width="1.7647%" height="15" fill="rgb(238,154,13)" fg:x="327" fg:w="6"/><text x="96.4265%" y="110.50"></text></g><g><title>area (poly_match_v1.py:23) (4 samples, 1.18%)</title><rect x="96.7647%" y="116" width="1.1765%" height="15" fill="rgb(219,56,2)" fg:x="329" fg:w="4"/><text x="97.0147%" y="126.50"></text></g><g><title>roll (&lt;__array_function__ internals&gt;:180) (2 samples, 0.59%)</title><rect x="97.3529%" y="132" width="0.5882%" height="15" fill="rgb(233,0,4)" fg:x="331" fg:w="2"/><text x="97.6029%" y="142.50"></text></g><g><title>array_implement_array_function (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (2 samples, 0.59%)</title><rect x="97.3529%" y="148" width="0.5882%" height="15" fill="rgb(235,30,7)" fg:x="331" fg:w="2"/><text x="97.6029%" y="158.50"></text></g><g><title>roll (numpy/core/numeric.py:1225) (2 samples, 0.59%)</title><rect x="97.3529%" y="164" width="0.5882%" height="15" fill="rgb(250,79,13)" fg:x="331" fg:w="2"/><text x="97.6029%" y="174.50"></text></g><g><title>roll (&lt;__array_function__ internals&gt;:180) (2 samples, 0.59%)</title><rect x="97.3529%" y="180" width="0.5882%" height="15" fill="rgb(211,146,34)" fg:x="331" fg:w="2"/><text x="97.6029%" y="190.50"></text></g><g><title>array_implement_array_function (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (2 samples, 0.59%)</title><rect x="97.3529%" y="196" width="0.5882%" height="15" fill="rgb(228,22,38)" fg:x="331" fg:w="2"/><text x="97.6029%" y="206.50"></text></g><g><title>roll (numpy/core/numeric.py:1248) (1 samples, 0.29%)</title><rect x="97.6471%" y="212" width="0.2941%" height="15" fill="rgb(235,168,5)" fg:x="332" fg:w="1"/><text x="97.8971%" y="222.50"></text></g><g><title>array_assign_subscript (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1 samples, 0.29%)</title><rect x="97.6471%" y="228" width="0.2941%" height="15" fill="rgb(221,155,16)" fg:x="332" fg:w="1"/><text x="97.8971%" y="238.50"></text></g><g><title>get_view_from_index (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1 samples, 0.29%)</title><rect x="97.6471%" y="244" width="0.2941%" height="15" fill="rgb(215,215,53)" fg:x="332" fg:w="1"/><text x="97.8971%" y="254.50"></text></g><g><title>&lt;module&gt; (numpy/__init__.py:146) (1 samples, 0.29%)</title><rect x="97.9412%" y="260" width="0.2941%" height="15" fill="rgb(223,4,10)" fg:x="333" fg:w="1"/><text x="98.1912%" y="270.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1078) (1 samples, 0.29%)</title><rect x="97.9412%" y="276" width="0.2941%" height="15" fill="rgb(234,103,6)" fg:x="333" fg:w="1"/><text x="98.1912%" y="286.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (1 samples, 0.29%)</title><rect x="97.9412%" y="292" width="0.2941%" height="15" fill="rgb(227,97,0)" fg:x="333" fg:w="1"/><text x="98.1912%" y="302.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1027) (1 samples, 0.29%)</title><rect x="97.9412%" y="308" width="0.2941%" height="15" fill="rgb(234,150,53)" fg:x="333" fg:w="1"/><text x="98.1912%" y="318.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1006) (1 samples, 0.29%)</title><rect x="97.9412%" y="324" width="0.2941%" height="15" fill="rgb(228,201,54)" fg:x="333" fg:w="1"/><text x="98.1912%" y="334.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:688) (1 samples, 0.29%)</title><rect x="97.9412%" y="340" width="0.2941%" height="15" fill="rgb(222,22,37)" fg:x="333" fg:w="1"/><text x="98.1912%" y="350.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:883) (1 samples, 0.29%)</title><rect x="97.9412%" y="356" width="0.2941%" height="15" fill="rgb(237,53,32)" fg:x="333" fg:w="1"/><text x="98.1912%" y="366.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (1 samples, 0.29%)</title><rect x="97.9412%" y="372" width="0.2941%" height="15" fill="rgb(233,25,53)" fg:x="333" fg:w="1"/><text x="98.1912%" y="382.50"></text></g><g><title>&lt;module&gt; (numpy/lib/__init__.py:37) (1 samples, 0.29%)</title><rect x="97.9412%" y="388" width="0.2941%" height="15" fill="rgb(210,40,34)" fg:x="333" fg:w="1"/><text x="98.1912%" y="398.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1027) (1 samples, 0.29%)</title><rect x="97.9412%" y="404" width="0.2941%" height="15" fill="rgb(241,220,44)" fg:x="333" fg:w="1"/><text x="98.1912%" y="414.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1006) (1 samples, 0.29%)</title><rect x="97.9412%" y="420" width="0.2941%" height="15" fill="rgb(235,28,35)" fg:x="333" fg:w="1"/><text x="98.1912%" y="430.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:688) (1 samples, 0.29%)</title><rect x="97.9412%" y="436" width="0.2941%" height="15" fill="rgb(210,56,17)" fg:x="333" fg:w="1"/><text x="98.1912%" y="446.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:883) (1 samples, 0.29%)</title><rect x="97.9412%" y="452" width="0.2941%" height="15" fill="rgb(224,130,29)" fg:x="333" fg:w="1"/><text x="98.1912%" y="462.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (1 samples, 0.29%)</title><rect x="97.9412%" y="468" width="0.2941%" height="15" fill="rgb(235,212,8)" fg:x="333" fg:w="1"/><text x="98.1912%" y="478.50"></text></g><g><title>&lt;module&gt; (numpy/lib/npyio.py:6) (1 samples, 0.29%)</title><rect x="97.9412%" y="484" width="0.2941%" height="15" fill="rgb(223,33,50)" fg:x="333" fg:w="1"/><text x="98.1912%" y="494.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1027) (1 samples, 0.29%)</title><rect x="97.9412%" y="500" width="0.2941%" height="15" fill="rgb(219,149,13)" fg:x="333" fg:w="1"/><text x="98.1912%" y="510.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1006) (1 samples, 0.29%)</title><rect x="97.9412%" y="516" width="0.2941%" height="15" fill="rgb(250,156,29)" fg:x="333" fg:w="1"/><text x="98.1912%" y="526.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:688) (1 samples, 0.29%)</title><rect x="97.9412%" y="532" width="0.2941%" height="15" fill="rgb(216,193,19)" fg:x="333" fg:w="1"/><text x="98.1912%" y="542.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:879) (1 samples, 0.29%)</title><rect x="97.9412%" y="548" width="0.2941%" height="15" fill="rgb(216,135,14)" fg:x="333" fg:w="1"/><text x="98.1912%" y="558.50"></text></g><g><title>get_code (&lt;frozen importlib._bootstrap_external&gt;:975) (1 samples, 0.29%)</title><rect x="97.9412%" y="564" width="0.2941%" height="15" fill="rgb(241,47,5)" fg:x="333" fg:w="1"/><text x="98.1912%" y="574.50"></text></g><g><title>get_data (&lt;frozen importlib._bootstrap_external&gt;:1073) (1 samples, 0.29%)</title><rect x="97.9412%" y="580" width="0.2941%" height="15" fill="rgb(233,42,35)" fg:x="333" fg:w="1"/><text x="98.1912%" y="590.50"></text></g><g><title>lseek64 (libpthread-2.31.so) (1 samples, 0.29%)</title><rect x="97.9412%" y="596" width="0.2941%" height="15" fill="rgb(231,13,6)" fg:x="333" fg:w="1"/><text x="98.1912%" y="606.50"></text></g><g><title>&lt;module&gt; (measure.py:2) (4 samples, 1.18%)</title><rect x="97.9412%" y="68" width="1.1765%" height="15" fill="rgb(207,181,40)" fg:x="333" fg:w="4"/><text x="98.1912%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1027) (4 samples, 1.18%)</title><rect x="97.9412%" y="84" width="1.1765%" height="15" fill="rgb(254,173,49)" fg:x="333" fg:w="4"/><text x="98.1912%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1006) (4 samples, 1.18%)</title><rect x="97.9412%" y="100" width="1.1765%" height="15" fill="rgb(221,1,38)" fg:x="333" fg:w="4"/><text x="98.1912%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:688) (4 samples, 1.18%)</title><rect x="97.9412%" y="116" width="1.1765%" height="15" fill="rgb(206,124,46)" fg:x="333" fg:w="4"/><text x="98.1912%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:883) (4 samples, 1.18%)</title><rect x="97.9412%" y="132" width="1.1765%" height="15" fill="rgb(249,21,11)" fg:x="333" fg:w="4"/><text x="98.1912%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (4 samples, 1.18%)</title><rect x="97.9412%" y="148" width="1.1765%" height="15" fill="rgb(222,201,40)" fg:x="333" fg:w="4"/><text x="98.1912%" y="158.50"></text></g><g><title>&lt;module&gt; (poly_match_v1.py:3) (4 samples, 1.18%)</title><rect x="97.9412%" y="164" width="1.1765%" height="15" fill="rgb(235,61,29)" fg:x="333" fg:w="4"/><text x="98.1912%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:1027) (4 samples, 1.18%)</title><rect x="97.9412%" y="180" width="1.1765%" height="15" fill="rgb(219,207,3)" fg:x="333" fg:w="4"/><text x="98.1912%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:1006) (4 samples, 1.18%)</title><rect x="97.9412%" y="196" width="1.1765%" height="15" fill="rgb(222,56,46)" fg:x="333" fg:w="4"/><text x="98.1912%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:688) (4 samples, 1.18%)</title><rect x="97.9412%" y="212" width="1.1765%" height="15" fill="rgb(239,76,54)" fg:x="333" fg:w="4"/><text x="98.1912%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:883) (4 samples, 1.18%)</title><rect x="97.9412%" y="228" width="1.1765%" height="15" fill="rgb(231,124,27)" fg:x="333" fg:w="4"/><text x="98.1912%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:241) (4 samples, 1.18%)</title><rect x="97.9412%" y="244" width="1.1765%" height="15" fill="rgb(249,195,6)" fg:x="333" fg:w="4"/><text x="98.1912%" y="254.50"></text></g><g><title>&lt;module&gt; (numpy/__init__.py:348) (3 samples, 0.88%)</title><rect x="98.2353%" y="260" width="0.8824%" height="15" fill="rgb(237,174,47)" fg:x="334" fg:w="3"/><text x="98.4853%" y="270.50"></text></g><g><title>_sanity_check (numpy/__init__.py:335) (3 samples, 0.88%)</title><rect x="98.2353%" y="276" width="0.8824%" height="15" fill="rgb(206,201,31)" fg:x="334" fg:w="3"/><text x="98.4853%" y="286.50"></text></g><g><title>array_dot (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (3 samples, 0.88%)</title><rect x="98.2353%" y="292" width="0.8824%" height="15" fill="rgb(231,57,52)" fg:x="334" fg:w="3"/><text x="98.4853%" y="302.50"></text></g><g><title>PyArray_MatrixProduct2 (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (3 samples, 0.88%)</title><rect x="98.2353%" y="308" width="0.8824%" height="15" fill="rgb(248,177,22)" fg:x="334" fg:w="3"/><text x="98.4853%" y="318.50"></text></g><g><title>cblas_matrixproduct (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (3 samples, 0.88%)</title><rect x="98.2353%" y="324" width="0.8824%" height="15" fill="rgb(215,211,37)" fg:x="334" fg:w="3"/><text x="98.4853%" y="334.50"></text></g><g><title>FLOAT_dot (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (3 samples, 0.88%)</title><rect x="98.2353%" y="340" width="0.8824%" height="15" fill="rgb(241,128,51)" fg:x="334" fg:w="3"/><text x="98.4853%" y="350.50"></text></g><g><title>cblas_sdot_ (libmkl_rt.so.1) (3 samples, 0.88%)</title><rect x="98.2353%" y="356" width="0.8824%" height="15" fill="rgb(227,165,31)" fg:x="334" fg:w="3"/><text x="98.4853%" y="366.50"></text></g><g><title>mkl_sdl_load_function (libmkl_rt.so.1) (3 samples, 0.88%)</title><rect x="98.2353%" y="372" width="0.8824%" height="15" fill="rgb(228,167,24)" fg:x="334" fg:w="3"/><text x="98.4853%" y="382.50"></text></g><g><title>dlopen (libdl-2.31.so) (3 samples, 0.88%)</title><rect x="98.2353%" y="388" width="0.8824%" height="15" fill="rgb(228,143,12)" fg:x="334" fg:w="3"/><text x="98.4853%" y="398.50"></text></g><g><title>0x7f3140421b59 (libdl-2.31.so) (3 samples, 0.88%)</title><rect x="98.2353%" y="404" width="0.8824%" height="15" fill="rgb(249,149,8)" fg:x="334" fg:w="3"/><text x="98.4853%" y="414.50"></text></g><g><title>_dl_catch_error (libc-2.31.so) (3 samples, 0.88%)</title><rect x="98.2353%" y="420" width="0.8824%" height="15" fill="rgb(243,35,44)" fg:x="334" fg:w="3"/><text x="98.4853%" y="430.50"></text></g><g><title>_dl_catch_exception (libc-2.31.so) (3 samples, 0.88%)</title><rect x="98.2353%" y="436" width="0.8824%" height="15" fill="rgb(246,89,9)" fg:x="334" fg:w="3"/><text x="98.4853%" y="446.50"></text></g><g><title>0x7f314042134c (libdl-2.31.so) (3 samples, 0.88%)</title><rect x="98.2353%" y="452" width="0.8824%" height="15" fill="rgb(233,213,13)" fg:x="334" fg:w="3"/><text x="98.4853%" y="462.50"></text></g><g><title>0x7f31404705fa (ld-2.31.so) (3 samples, 0.88%)</title><rect x="98.2353%" y="468" width="0.8824%" height="15" fill="rgb(233,141,41)" fg:x="334" fg:w="3"/><text x="98.4853%" y="478.50"></text></g><g><title>_dl_catch_exception (libc-2.31.so) (3 samples, 0.88%)</title><rect x="98.2353%" y="484" width="0.8824%" height="15" fill="rgb(239,167,4)" fg:x="334" fg:w="3"/><text x="98.4853%" y="494.50"></text></g><g><title>0x7f3140470f5c (ld-2.31.so) (3 samples, 0.88%)</title><rect x="98.2353%" y="500" width="0.8824%" height="15" fill="rgb(209,217,16)" fg:x="334" fg:w="3"/><text x="98.4853%" y="510.50"></text></g><g><title>0x7f3140469304 (ld-2.31.so) (3 samples, 0.88%)</title><rect x="98.2353%" y="516" width="0.8824%" height="15" fill="rgb(219,88,35)" fg:x="334" fg:w="3"/><text x="98.4853%" y="526.50"></text></g><g><title>&lt;module&gt; (measure.py:9) (1 samples, 0.29%)</title><rect x="99.1176%" y="68" width="0.2941%" height="15" fill="rgb(220,193,23)" fg:x="337" fg:w="1"/><text x="99.3676%" y="78.50"></text></g><g><title>generate_example (poly_match_v1.py:45) (1 samples, 0.29%)</title><rect x="99.1176%" y="84" width="0.2941%" height="15" fill="rgb(230,90,52)" fg:x="337" fg:w="1"/><text x="99.3676%" y="94.50"></text></g><g><title>&lt;listcomp&gt; (poly_match_v1.py:47) (1 samples, 0.29%)</title><rect x="99.1176%" y="100" width="0.2941%" height="15" fill="rgb(252,106,19)" fg:x="337" fg:w="1"/><text x="99.3676%" y="110.50"></text></g><g><title>0x7f313e4f3a62 (?) (1 samples, 0.29%)</title><rect x="99.1176%" y="116" width="0.2941%" height="15" fill="rgb(206,74,20)" fg:x="337" fg:w="1"/><text x="99.3676%" y="126.50"></text></g><g><title>0x7f313e10111a (?) (1 samples, 0.29%)</title><rect x="99.1176%" y="132" width="0.2941%" height="15" fill="rgb(230,138,44)" fg:x="337" fg:w="1"/><text x="99.3676%" y="142.50"></text></g><g><title>array_array (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1 samples, 0.29%)</title><rect x="99.1176%" y="148" width="0.2941%" height="15" fill="rgb(235,182,43)" fg:x="337" fg:w="1"/><text x="99.3676%" y="158.50"></text></g><g><title>_npy_parse_arguments (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1 samples, 0.29%)</title><rect x="99.1176%" y="164" width="0.2941%" height="15" fill="rgb(242,16,51)" fg:x="337" fg:w="1"/><text x="99.3676%" y="174.50"></text></g><g><title>PyArray_CopyConverter (numpy/core/_multiarray_umath.cpython-310-x86_64-linux-gnu.so) (1 samples, 0.29%)</title><rect x="99.1176%" y="180" width="0.2941%" height="15" fill="rgb(248,9,4)" fg:x="337" fg:w="1"/><text x="99.3676%" y="190.50"></text></g><g><title>gc_collect_with_callback (python3.10) (1 samples, 0.29%)</title><rect x="99.4118%" y="68" width="0.2941%" height="15" fill="rgb(210,31,22)" fg:x="338" fg:w="1"/><text x="99.6618%" y="78.50"></text></g><g><title>all (340 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(239,54,39)" fg:x="0" fg:w="340"/><text x="0.2500%" y="62.50"></text></g><g><title>unicode_dealloc (python3.10) (1 samples, 0.29%)</title><rect x="99.7059%" y="68" width="0.2941%" height="15" fill="rgb(230,99,41)" fg:x="339" fg:w="1"/><text x="99.9559%" y="78.50"></text></g><g><title>0x7f3140173b69 (libc-2.31.so) (1 samples, 0.29%)</title><rect x="99.7059%" y="84" width="0.2941%" height="15" fill="rgb(253,106,12)" fg:x="339" fg:w="1"/><text x="99.9559%" y="94.50"></text></g></svg></svg>